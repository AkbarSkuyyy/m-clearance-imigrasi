rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function isOfficerOrAdmin() {
      return isSignedIn() && (
        request.auth.token.role == 'officer' ||
        request.auth.token.role == 'admin'
      );
    }

    function isClientAllowedStatus(s) {
      return s == 'pending_email_verification' ||
             s == 'pending_documents' ||
             s == 'pending_approval';
    }

    function noBackslide(old, new) {
      // isEmailVerified / hasUploadedDocuments cannot revert from true to false
      return !(old.isEmailVerified == true && new.isEmailVerified == false) &&
             !(old.hasUploadedDocuments == true && new.hasUploadedDocuments == false);
    }

    function immutablesUnchanged(old, new) {
      // uid, email, role, createdAt must not change
      return new.uid == old.uid &&
             new.email == old.email &&
             new.role == old.role &&
             new.createdAt == old.createdAt;
    }

    function ownerOnlyAllowedFieldsUnchanged(old, new) {
      // Owner may ONLY change: isEmailVerified, hasUploadedDocuments, documents, status, updatedAt
      // Keep other known profile fields unchanged in client updates
      return new.corporateName == old.corporateName &&
             new.username == old.username &&
             new.nationality == old.nationality;
    }

    function validOwnerStatusTransition(old, new) {
      let bs = old.status;
      let ns = new.status;

      // Only allow client-set statuses within the allowed set
      return isClientAllowedStatus(ns) && (
        // Transition 1: pending_email_verification -> pending_documents
        (bs == 'pending_email_verification' && ns == 'pending_documents'
          && request.auth.token.email_verified == true
          && new.isEmailVerified == true)
        ||
        // Transition 2: pending_documents -> pending_approval
        (bs == 'pending_documents' && ns == 'pending_approval'
          && new.hasUploadedDocuments == true
          && size(new.documents) >= size(old.documents))
        ||
        // Otherwise, status must be no-op
        (ns == bs)
      );
    }

    function isOwnerAllowedUpdate(old, new) {
      return immutablesUnchanged(old, new)
        && noBackslide(old, new)
        && size(new.documents) >= size(old.documents)
        && ownerOnlyAllowedFieldsUnchanged(old, new)
        && validOwnerStatusTransition(old, new);
    }

    function isOfficerAdminAllowedUpdate(old, new) {
      let bs = old.status;
      let ns = new.status;

      // Officer/Admin may only set status from pending_approval -> approved/rejected and update updatedAt.
      // They MUST NOT change uid, email, role, createdAt, documents, hasUploadedDocuments, isEmailVerified or profile fields.
      return immutablesUnchanged(old, new)
        && new.documents == old.documents
        && new.hasUploadedDocuments == old.hasUploadedDocuments
        && new.isEmailVerified == old.isEmailVerified
        && new.corporateName == old.corporateName
        && new.username == old.username
        && new.nationality == old.nationality
        && (
          (bs == 'pending_approval' && (ns == 'approved' || ns == 'rejected'))
          || (ns == bs) // allow no-op
        );
    }

    // Users collection: users/{uid}
    match /users/{uid} {
      // Read:
      // - Owner can read their own doc
      // - Officers/Admins can read all
      allow read: if isSignedIn() && (isOwner(uid) || isOfficerOrAdmin());

      // Create: Only the owner may create their own doc (Functions typically create; this is a guard)
      allow create: if isSignedIn() && isOwner(uid);

      // Update:
      // - Owner limited to allowed fields and transitions
      // - Officer/Admin limited to decision transitions and updatedAt
      allow update: if isSignedIn() && (
        (isOwner(uid) && isOwnerAllowedUpdate(resource.data, request.resource.data)) ||
        (isOfficerOrAdmin() && isOfficerAdminAllowedUpdate(resource.data, request.resource.data))
      );

      // Delete: deny for all clients
      allow delete: if false;
    }

    // Notifications: notifications/{uid}/items/{notifId}
    // Read allowed for owner; client writes denied (Functions use admin privileges)
    match /notifications/{uid}/{document=**} {
      allow read: if isSignedIn() && isOwner(uid);
      allow write: if false;
    }

    // Review queue (used by backoffice): reviewQueue/{reviewId}
    match /reviewQueue/{reviewId} {
      // Officers/Admins only
      allow read, write: if isOfficerOrAdmin();
    }

    // Default: deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
